#!/bin/bash
# 
# Inputs:
# 
#    jwst dataset names ("jwpppppooovvv_ggsaa_eeeee_detector_prodType")
#    
#    For each input jwst dataset name, the following file must exist:
#        {dataset_name}/calibrated1_rates/{dataset_name}_rate.fits
# 
# Outputs:
# 
#    For each input jwst dataset name, the main output file is: 
#        {dataset_name}/calibrated2_cals/{dataset_name}_cal.fits
# 
# 
set -e

# Set necessary system variables
if [[ -z "$CRDS_PATH" ]]; then
    export CRDS_PATH=$HOME/jwst_crds_cache
fi
if [[ -z "$CRDS_SERVER_URL" ]]; then
    export CRDS_SERVER_URL=https://jwst-crds.stsci.edu
fi

# Get script_dir
script_dir=$(dirname "${BASH_SOURCE[0]}")


# Read user input
iarg=1
argstr=""
work_dir="."
current_dir=$(pwd)
overwrite=0
dataset_names=()
while [[ $iarg -le $# ]]; do
    argstr=$(echo "${!iarg}" | tr '[:upper:]' '[:lower:]' | perl -p -e 's/_/-/g' | perl -p -e 's/^-([a-z]+.*)/--\1/g')
    if [[ "$argstr" == "--"* ]]; then
        if [[ "$argstr" == "--work-dir" ]]; then
            iarg=$((iarg+1))
            if [[ $iarg -le $# ]]; then
                work_dir="${!iarg}"
                echo "work_dir = \"$work_dir\""
            fi
        else
            echo "Unkonwn argument: ${!iarg}"
        fi
    else
        dataset_names+=("${!iarg}")
    fi
    # 
    iarg=$((iarg+1))
done


# Check user input
# If dataset_names is not given, then we will search under current or specified working directory.
if [[ ${#dataset_names[@]} -eq 0 ]]; then
    if [[ "$work_dir" != "." ]]; then
        echo "Searching for JWST dataset under working directory: $work_dir"
        found_dirs=($(find $work_dir -maxdepth 1 -mindepth 1 -type d -name "jw*_*" | sort -V))
    else
        echo "Searching for JWST dataset under current directory: $current_dir"
        found_dirs=($(find . -maxdepth 1 -mindepth 1 -type d -name "jw*_*" | sort -V))
    fi
    for (( i = 0; i < ${#found_dirs[@]}; i++ )); do
        found_dirname=$(basename "${found_dirs[i]}")
        if [[ $($script_dir/go-jwst-parse-dataset-name.py "$found_dirname" 2>/dev/null | tail -n 1) == "JWST_Dataset_Name"* ]]; then
            dataset_names+=("$found_dirname")
        fi
    done
else
    for (( i = 0; i < ${#dataset_names[@]}; i++ )); do
        dataset_name="${dataset_names[i]}"
        if [[ "$dataset_name" == *"/" ]]; then
            dataset_name=$(echo "$dataset_name" | perl -p -e 's%/+$%%g')
        fi
        if [[ $($script_dir/go-jwst-parse-dataset-name.py "$dataset_name" 2>/dev/null | tail -n 1) != "JWST_Dataset_Name"* ]]; then
            echo "Error! The input dataset name \"$dataset_name\" seems incorrect?"
            exit 255
        fi
    done
fi

if [[ ${#dataset_names[@]} -eq 0 ]]; then
    echo "No JWST dataset found!"
    exit 2
fi


# cd work_dir
if [[ "$work_dir" != "." ]]; then
    echo "cd \"$work_dir\""
    cd "$work_dir"
fi


# process datasets
files_in=()
for (( i = 0; i < ${#dataset_names[@]}; i++ )); do
    
    dataset_name="${dataset_names[i]}"
    echo "*** Processing $dataset_name ***"
    
    if [[ ! -d $dataset_name ]]; then
        echo "Error! Dataset directory does not exist: \"$(pwd)/$dataset_name\"!"
        exit 255
    fi
    
    echo cd $dataset_name
    cd $dataset_name
    
    # check input file: ${dataset_name}_cal.fits
    echo "Checking calibrated2_cals/${dataset_name}_cal.fits"
    if [[ ! -f calibrated2_cals/${dataset_name}_cal.fits ]] && [[ ! -L ${dataset_name}_cal.fits ]]; then
        echo "Error! Data file does not exist: \"$(pwd)/calibrated2_cals/${dataset_name}_cal.fits\"!"
        exit 255
    fi
    
    echo cd ../
    cd ../

    files_in+=("$dataset_name/calibrated2_cals/${dataset_name}_cal.fits")
    
done


# Run step 1
dir_out="calibrated3_mosaics"
proc_args=()
if [[ $overwrite -gt 0 ]]; then
    proc_args+=(--overwrite)
fi
echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-1.py ${files_in[@]} $dir_out "${proc_args[@]}"
$script_dir/go-jwst-imaging-stage-3-step-1.py ${files_in[@]} $dir_out "${proc_args[@]}"
ret=$?
if [[ $ret -ne 0 ]]; then
    echo "Error occurred?!"
    exit 255
fi
files_out=($(find $dir_out -maxdepth 2 -mindepth 2 -type f -name "jw*_obs*_*_i2d.fits" | sort -V | grep -v '+' | grep -v 'outlier'))
if [[ ${#files_out[@]} -eq 0 ]]; then
    echo "Error! Failed to produce the output files: \"$dir_out/jw*_obs*_*/jw*_obs*_*_i2d.fits\""
    exit 255
fi


# Store mosaic images
mosaic_images=()
for (( i = 0; i < ${#files_out[@]}; i++ )); do
    mosaic_images+=("${files_out[i]}")
done


# Set reprocess_MIRI_only
#reprocess_MIRI_only=1
#reprocess_MIRI_only=0 #<TODO>#
reprocess_MIRI_only=1 #<TODO>#


# A temporary variable reprocess_with_source_emission_mask
reprocess_with_source_emission_mask=0


# Mask source emission and produce darkobs rate, for MIRI only
for (( i = 0; i < ${#mosaic_images[@]}; i++ )); do
    
    # mosaic_image
    mosaic_image="${mosaic_images[i]}"
    if [[ $reprocess_MIRI_only -gt 0 ]] && [[ "$mosaic_image" != *"MIRI"* ]]; then
       continue
    fi
    
    reprocess_with_source_emission_mask=1
    
    mosaic_asn=$(dirname "$mosaic_image")"_asn.json"
    
    proc_args=()
    if [[ $overwrite -gt 0 ]]; then
        proc_args+=(--overwrite)
    fi
    echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-2-make-dark-rates.sh \
        "$mosaic_image" "$mosaic_asn" "${proc_args[@]}"
    $script_dir/go-jwst-imaging-stage-3-step-2-make-dark-rates.sh \
        "$mosaic_image" "$mosaic_asn" "${proc_args[@]}"
    
done


# Merge multi-obs same-instrument-filter darkobs rates, for MIRI only
for (( i = 0; i < ${#mosaic_images[@]}; i++ )); do
    
    # mosaic_image
    mosaic_image="${mosaic_images[i]}"
    if [[ $reprocess_MIRI_only -gt 0 ]] && [[ "$mosaic_image" != *"MIRI"* ]]; then
       continue
    fi
    
    reprocess_with_source_emission_mask=1
    
    echo "*** Processing $mosaic_image ***"
    
    mosaic_asn=$(dirname "$mosaic_image")"_asn.json"
    echo "mosaic_asn = $mosaic_asn"
    
    instrument_filter=($(basename $(dirname "$mosaic_image") | cut -d '_' -f 3,4))
    echo "instrument_filter = $instrument_filter"
    
    multiobs_mosaic_asn=($(ls $(dirname "$mosaic_asn")/jw*_obs*_${instrument_filter}"_asn.json"))
    
    echo "multiobs_mosaic_asn = ${multiobs_mosaic_asn[@]} (${#multiobs_mosaic_asn[@]})"
    
    proc_args=()
    if [[ $overwrite -gt 0 ]]; then
        proc_args+=(--overwrite)
    fi
    echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-3-merge-dark-rates.sh \
        ${multiobs_mosaic_asn[@]} "${proc_args[@]}"
    $script_dir/go-jwst-imaging-stage-3-step-3-merge-dark-rates.sh \
        ${multiobs_mosaic_asn[@]} "${proc_args[@]}"
    
done


if [[ $reprocess_with_source_emission_mask -gt 0 ]]; then
    
    # Get _bkgsub_masked_source_emission_cal.fits
    redo_files_in=()
    for (( i = 0; i < ${#dataset_names[@]}; i++ )); do
        dataset_name="${dataset_names[i]}"
        if [[ -f "$dataset_name/calibrated2_cals/${dataset_name}_bkgsub_masked_source_emission_cal.fits" ]]; then
            redo_files_in+=("$dataset_name/calibrated2_cals/${dataset_name}_bkgsub_masked_source_emission_cal.fits")
        fi
    done


    # Redo step 1 mosaic
    redo_dir_out="calibrated3_mosaics_redone_with_source_emission_mask"
    proc_args=()
    if [[ $overwrite -gt 0 ]]; then
        proc_args+=(--overwrite)
    fi
    echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-1.py ${redo_files_in[@]} $redo_dir_out "${proc_args[@]}"
    $script_dir/go-jwst-imaging-stage-3-step-1.py ${redo_files_in[@]} $redo_dir_out "${proc_args[@]}"
    ret=$?
    if [[ $ret -ne 0 ]]; then
        echo "Error occurred?!"
        exit 255
    fi
    redo_files_out=($(find $redo_dir_out -maxdepth 2 -mindepth 2 -type f -name "jw*_obs*_*_i2d.fits" | sort -V | grep -v '+' | grep -v 'outlier'))
    if [[ ${#redo_files_out[@]} -eq 0 ]]; then
        echo "Error! Failed to produce the output files: \"$redo_dir_out/jw*_obs*_*/jw*_obs*_*_i2d.fits\""
        exit 255
    fi

fi




echo "All done!"










