#!/bin/bash
# 
# Inputs:
# 
#    jwst dataset names ("jwpppppooovvv_ggsaa_eeeee_detector_prodType")
#    
#    For each input jwst dataset name, the following file must exist:
#        {dataset_name}/calibrated1_rates/{dataset_name}_rate.fits
# 
# Outputs:
# 
#    For each input jwst dataset name, the main output file is: 
#        {dataset_name}/calibrated2_cals/{dataset_name}_cal.fits
# 
# 
set -e

# Set necessary system variables
if [[ -z "$CRDS_PATH" ]]; then
    export CRDS_PATH=$HOME/jwst_crds_cache
fi
if [[ -z "$CRDS_SERVER_URL" ]]; then
    export CRDS_SERVER_URL=https://jwst-crds.stsci.edu
fi

# Get script_dir
script_dir=$(dirname "${BASH_SOURCE[0]}")


# Read user input
iarg=1
argstr=""
work_dir="."
overwrite=0
dataset_names=()
while [[ $iarg -le $# ]]; do
    argstr=$(echo "${!iarg}" | tr '[:upper:]' '[:lower:]' | perl -p -e 's/_/-/g' | perl -p -e 's/^-([a-z]+.*)/--\1/g')
    if [[ "$argstr" == "--"* ]]; then
        if [[ "$argstr" == "--work-dir" ]]; then
            iarg=$((iarg+1))
            if [[ $iarg -le $# ]]; then
                work_dir="${!iarg}"
                echo "work_dir = \"$work_dir\""
            fi
        else
            echo "Unkonwn argument: ${!iarg}"
        fi
    else
        dataset_names+=("${!iarg}")
    fi
    # 
    iarg=$((iarg+1))
done


# Check user input
# If dataset_names is not given, then we will search under current or specified working directory.
if [[ ${#dataset_names[@]} -eq 0 ]]; then
    if [[ "$work_dir" != "." ]]; then
        echo "Searching for JWST dataset under working directory: $work_dir"
        found_dirs=($(find $work_dir -maxdepth 1 -mindepth 1 -type d -name "jw*_*" | sort -V))
    else
        echo "Searching for JWST dataset under current directory: $current_dir"
        found_dirs=($(find . -maxdepth 1 -mindepth 1 -type d -name "jw*_*" | sort -V))
    fi
    for (( i = 0; i < ${#found_dirs[@]}; i++ )); do
        found_dirname=$(basename "${found_dirs[i]}")
        if [[ $($script_dir/go-jwst-parse-dataset-name.py "$found_dirname" 2>/dev/null | tail -n 1) == "JWST_Dataset_Name"* ]]; then
            dataset_names+=("$found_dirname")
        fi
    done
else
    for (( i = 0; i < ${#dataset_names[@]}; i++ )); do
        dataset_name="${dataset_names[i]}"
        if [[ $($script_dir/go-jwst-parse-dataset-name.py "$dataset_name" 2>/dev/null | tail -n 1) != "JWST_Dataset_Name"* ]]; then
            echo "Error! The input dataset name \"$dataset_name\" seems incorrect?"
            exit 255
        fi
    done
fi

if [[ ${#dataset_names[@]} -eq 0 ]]; then
    echo "No JWST dataset found!"
    exit 2
fi


# cd work_dir
if [[ "$work_dir" != "." ]]; then
    echo "cd \"$work_dir\""
    cd "$work_dir"
fi


# process datasets
files_in=()
for (( i = 0; i < ${#dataset_names[@]}; i++ )); do
    
    dataset_name="${dataset_names[i]}"
    echo "*** Processing $dataset_name ***"
    
    if [[ ! -d $dataset_name ]]; then
        echo "Error! Dataset directory does not exist: \"$(pwd)/$dataset_name\"!"
        exit 255
    fi
    
    echo cd $dataset_name
    cd $dataset_name
    
    # check input file: ${dataset_name}_cal.fits
    echo "Checking calibrated2_cals/${dataset_name}_cal.fits"
    if [[ ! -f calibrated2_cals/${dataset_name}_cal.fits ]] && [[ ! -L ${dataset_name}_cal.fits ]]; then
        echo "Error! Data file does not exist: \"$(pwd)/calibrated2_cals/${dataset_name}_cal.fits\"!"
        exit 255
    fi
    
    echo cd ../
    cd ../

    files_in+=("$dataset_name/calibrated2_cals/${dataset_name}_cal.fits")
    
done


# Run step 1
dir_out="calibrated3_mosaics"
proc_args=()
if [[ $overwrite -gt 0 ]]; then
    proc_args+=(--overwrite)
fi
echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-1.py ${files_in[@]} $dir_out "${proc_args[@]}"
$script_dir/go-jwst-imaging-stage-3-step-1.py ${files_in[@]} $dir_out "${proc_args[@]}"
ret=$?
if [[ $ret -ne 0 ]]; then
    echo "Error occurred?!"
    exit 255
fi
files_out=($(find $dir_out -maxdepth 2 -mindepth 2 -type f -name "jw*_obs*_*_i2d.fits"))
if [[ ${#files_out[@]} -eq 0 ]]; then
    echo "Error! Failed to produce the output files: \"$dir_out/jw*_obs*_*/jw*_obs*_*_i2d.fits\""
    exit 255
fi


# Run step 2, mask source emission and produce darkobs, for MIRI only
for (( i = 0; i < ${#files_out[@]}; i++ )); do
    
    # mosaic_image
    mosaic_image="${files_out[i]}"
    if [[ "$mosaic_image" != *"MIRI"* ]]; then
       continue
    fi
    
    # obtain galaxy seed image
    this_file_in="$mosaic_image"
    this_file_out=$(echo "$this_file_in" | perl -p -e 's/\.fits$//g')"_remstriping_galaxy_seed_image.fits"
    this_dir_out=$(dirname "$this_file_out")
    if [[ ! -f "$this_file_out" ]] || [[ $overwrite -gt 0 ]]; then
        echo $script_dir/remstriping "$this_file_in" \
            --no-apply-flat \
            --no-inplace \
            --output-dir "$this_dir_out" \
            --output-suffix "remstriping" \
            --smooth 3.0
        $script_dir/remstriping "$this_file_in" \
            --no-apply-flat \
            --no-inplace \
            --output-dir "$this_dir_out" \
            --output-suffix "remstriping" \
            --smooth 3.0
    fi
    if [[ ! -f "$this_file_out" ]]; then
        echo "Error! Failed to produce the output files: \"$this_file_out\""
        exit 255
    fi
    
    seed_image="$this_file_out"
    
    # find all associated cal.fits and rate.fits, mask them with source emission
    asn_dir=$(dirname "$this_file_in")
    asn_file=${asn_dir}_asn.json
    asn_cal_images=($(cat "$asn_file" | grep "expname" | perl -p -e 's%[^0-9a-zA-Z_/.+-]% %g' | awk '{print $2}'))
    asn_rate_images=()
    masked_rate_images=()
    for (( k = 0; k < ${#asn_cal_images[@]}; k++ )); do
        asn_rate=$(echo "${asn_cal_images[k]}" | perl -p -e 's%/calibrated2_cals/%/calibrated1_rates/%g' | perl -p -e 's%_cal.fits$%_rate.fits%g')
        masked_rate=$(echo "$asn_rate" | perl -p -e 's%\.fits$%%g')"_masked_source_emission.fits"
        # make source-emission-masked rate image
        if [[ ! -f "$masked_rate" ]] || [[ $overwrite -gt 0 ]]; then
            echo $script_dir/util_mask_rate_data_with_seed_image.py \
                "$asn_rate" \
                "$seed_image" \
                "$masked_rate"
            $script_dir/util_mask_rate_data_with_seed_image.py \
                "$asn_rate" \
                "$seed_image" \
                "$masked_rate"
        fi
        if [[ ! -f "$masked_rate" ]]; then
            echo "Error! Failed to produce the output files: \"$masked_rate\""
            exit 255
        fi
        asn_rate_images+=("$asn_rate")
        masked_rate_images+=("$masked_rate")
    done
    
    # loop rate image dir, merge all other source-emission-masked rate in this mosaic
    for (( k = 0; k < ${#asn_rate_images[@]}; k++ )); do
        asn_rate="${asn_rate_images[k]}"
        merged_masked_rate=$(dirname "$asn_rate")"/merged_other_visits_rate_masked_source_emission.fits"
        merged_masked_rate_list_file=$(echo "$merged_masked_rate" | perl -p -e 's/\.fits$/.list.txt/g')
        # merge source-emission-masked rate images
        if [[ ! -f "$merged_masked_rate" ]] || [[ $overwrite -gt 0 ]]; then
            this_dataset_name=$(basename "$asn_rate" | perl -p -e 's/_rate.fits//g')
            other_masked_rates=()
            for (( m = 0; m < ${#masked_rate_images[@]}; m++ )); do
                if [[ "${masked_rate_images[m]}" != *"this_dataset_name"* ]]; then
                    other_masked_rates+=("${masked_rate_images[m]}")
                fi
            done
            echo $script_dir/util_merge_source_emission_masked_rate_data.py \
                ${other_masked_rates[@]} \
                "$merged_masked_rate"
            $script_dir/util_merge_source_emission_masked_rate_data.py \
                ${other_masked_rates[@]} \
                "$merged_masked_rate"
            echo "# $script_dir/util_merge_source_emission_masked_rate_data.py" > "$merged_masked_rate_list_file"
            for (( m = 0; m < ${#other_masked_rates[@]}; m++ )); do
                echo "${other_masked_rates[m]}" >> "$merged_masked_rate_list_file"
            done
            if [[ ! -f "$merged_masked_rate" ]]; then
                echo "Error! Failed to produce the output files: \"$merged_masked_rate\""
                exit 255
            fi
        fi
    done
    
    # loop rate image dir, reprocess pipeline stage2
    redone_cal_files=()
    for (( k = 0; k < ${#asn_rate_images[@]}; k++ )); do
        asn_rate="${asn_rate_images[k]}"
        asn_cal="${asn_cal_images[k]}"
        merged_masked_rate=$(dirname "$asn_rate")"/merged_other_visits_rate_masked_source_emission.fits"
        output_recal=$(echo "$asn_cal" | perl -p -e 's/_cal.fits$/_cal_bkgsub_with_source_emission_mask.fits/g')
        
        if [[ ! -f "$output_recal" ]] || [[ $overwrite -gt 0 ]]; then
            proc_args=(--darkobs "$merged_masked_rate")
            if [[ $overwrite -gt 0 ]]; then
                proc_args+=(--overwrite)
            fi
            echo "*** Running ***" $script_dir/go-jwst-imaging-stage-2-step-3-redo-bkgsub.py \
                "$asn_rate" \
                "$output_recal" \
                "${proc_args[@]}"
            $script_dir/go-jwst-imaging-stage-2-step-3-redo-bkgsub.py \
                "$asn_rate" \
                "$output_recal" \
                "${proc_args[@]}"
            if [[ ! -f "$output_recal" ]] && [[ ! -L "$output_recal" ]]; then
                echo "Error! Failed to produce the output file: $output_recal"
                exit 255
            fi
        fi
        redone_cal_files+=("$output_recal")
    done
    
    # redo mosaic
    redone_dir_out="calibrated3_mosaics_redone_with_source_emission_mask"
    proc_args=()
    if [[ $overwrite -gt 0 ]]; then
        proc_args+=(--overwrite)
    fi
    echo "*** Running ***" $script_dir/go-jwst-imaging-stage-3-step-1.py ${redone_cal_files[@]} $redone_dir_out "${proc_args[@]}"
    $script_dir/go-jwst-imaging-stage-3-step-1.py ${redone_cal_files[@]} $redone_dir_out "${proc_args[@]}"
    
done




echo "All done!"










