#!/bin/bash
# 
# Inputs:
# 
#    jwst uncal files ("/path/to/jwpppppooovvv_ggsaa_eeeee_detector_prodType_uncal.fits")
# 
# 
# Outputs:
# 
#    For each input jwst uncal file, we will copy it to the working directory (default is current directory)
#        {dataset_name}/uncals/{dataset_name}_uncal.fits
# 
# 
set -e

# Set necessary system variables
if [[ -z "$CRDS_PATH" ]]; then
    export CRDS_PATH=$HOME/jwst_crds_cache
fi
if [[ -z "$CRDS_SERVER_URL" ]]; then
    export CRDS_SERVER_URL=https://jwst-crds.stsci.edu
fi


# Get script_dir
script_dir=$(perl -MCwd -e 'print Cwd::abs_path shift' $(dirname "${BASH_SOURCE[0]}"))


# Read user input
iarg=1
argstr=""
work_dir="."
current_dir=$(pwd)
hardcopy=0 # do hardcopy instead of symlink
overwrite=0
data_files=()
check_grism=0
dry_run=0
unused_args=()
while [[ $iarg -le $# ]]; do
    argstr=$(echo "${!iarg}" | tr '[:upper:]' '[:lower:]' | perl -p -e 's/_/-/g' | perl -p -e 's/^[-]+/--/g')
    if [[ "$argstr" == "--"* ]]; then
        if [[ "$argstr" == "--work-dir" ]] || [[ "$argstr" == "--workdir" ]]; then
            iarg=$((iarg+1))
            if [[ $iarg -le $# ]]; then
                work_dir=$(echo "${!iarg}" | perl -p -e 's%/$%%g')
                echo "work_dir = \"$work_dir\""
            fi
        elif [[ "$argstr" == "--hard-copy" ]] || [[ "$argstr" == "--hardcopy" ]]; then
            hardcopy=1
            echo "hardcopy = $hardcopy"
        elif [[ "$argstr" == "--check-grism" ]]; then
            check_grism=1
            echo "check_grism = $check_grism"
        elif [[ "$argstr" == "--dry-run" ]]; then
            dry_run=1
            echo "dry_run = $dry_run"
        else
            unused_args+=("${!iarg}")
        fi
    else
        data_files+=("${!iarg}")
    fi
    # 
    iarg=$((iarg+1))
done


# Check user input
if [[ ${#data_files[@]} -eq 0 ]]; then
    echo "No input JWST uncal file!"
    exit 2
fi


# cd work_dir
if [[ "$work_dir" != "." ]]; then
    if [[ ! -d "$work_dir" ]]; then
        echo "mkdir -p \"$work_dir\""
        mkdir -p "$work_dir"
    fi
    echo "cd \"$work_dir\""
    cd "$work_dir"
fi


# process datasets
for (( i = 0; i < ${#data_files[@]}; i++ )); do
    
    data_file="${data_files[i]}"
    
    # 20221226 check_grism
    if [[ $check_grism -gt 0 ]]; then
        exp_type=$(fitsheader -k EXP_TYPE -e 0 "$data_file" | tail -n 1 | awk '{print $2}'| perl -pe 's/[^\w]//g')
        echo "** Checking $data_file (EXP_TYPE=$exp_type) *** "
        if [[ "$exp_type" != "NRC_WFSS" ]]; then
            continue
        fi
    fi
    
    echo "*** Processing $data_file ***"
    
    if [[ $dry_run -gt 0 ]]; then
        continue
    fi
    
    data_dirpath=$(dirname "$data_file")
    data_filename=$(basename "$data_file")
    
    #if [[ $($script_dir/go-jwst-parse-dataset-name.py "$data_filename" 2>/dev/null | tail -n 1) == "JWST_Dataset_Name"* ]]; then
    
    dataset_name=$(echo "$data_filename" | perl -p -e 's/_uncal\.fits$//g')
    
    if [[ ! -d $dataset_name ]]; then
        echo mkdir $dataset_name
        mkdir $dataset_name
    fi
    
    echo cd $dataset_name
    cd $dataset_name
    
    # check input directory: uncals
    if [[ ! -d uncals ]]; then
        echo "mkdir uncals"
        mkdir uncals
    fi
    
    # copy/link uncal data file from the MAST_DOWNLOAD_DIR
    if [[ ! -f uncals/${dataset_name}_uncal.fits ]] && [[ ! -L uncals/${dataset_name}_uncal.fits ]]; then
        # make relative data path correct if it is not an absolute path
        if [[ "$data_dirpath" != "/"* ]]; then
            rel_dirpath="../../$data_dirpath"
        else
            rel_dirpath="$data_dirpath"
        fi
        # make hardcopy or symlink
        if [[ $hardcopy -gt 0 ]]; then
            echo cp "${rel_dirpath}/${dataset_name}_uncal.fits" \
                            "uncals/${dataset_name}_uncal.fits"
            cp "${rel_dirpath}/${dataset_name}_uncal.fits" \
                       "uncals/${dataset_name}_uncal.fits"
        else
            echo ln -fs "${rel_dirpath}/${dataset_name}_uncal.fits" \
                                "uncals/${dataset_name}_uncal.fits"
            ln -fs "${rel_dirpath}/${dataset_name}_uncal.fits" \
                           "uncals/${dataset_name}_uncal.fits"
        fi
    fi
    
    # for "*_nrs" also copy "msa.fits"
    if [[ "$dataset_name" == *"_nrs1" ]] || [[ "$dataset_name" == *"_nrs2" ]] || \
       [[ "$dataset_name" == *"_nrs3" ]] || [[ "$dataset_name" == *"_nrs4" ]]; then
        
        if [[ ! -d auxiliary ]]; then
            echo "mkdir auxiliary"
            mkdir auxiliary
        fi
        
        if [[ "$data_dirpath" != "/"* ]]; then
            rel_dirpath="../$data_dirpath"
        else
            rel_dirpath="$data_dirpath"
        fi
        msa_name=$(echo "$dataset_name" | perl -p -e 's/^(jw[0-9]+)_([0-9]+)_([0-9]+)_([a-zA-Z0-9]+)$/\1/g')
        msa_files=($(find "$rel_dirpath" -maxdepth 1 -mindepth 1 -name "${msa_name}_*_msa.fits"))
        for (( k = 0; k < ${#msa_files[@]}; k++ )); do
            # copy/link "msa.fits" data file from the MAST_DOWNLOAD_DIR
            msa_name=$(basename "${msa_files[k]}")
            if [[ ! -f "auxiliary/$msa_name" ]] && [[ ! -L "auxiliary/$msa_name" ]]; then
                # make relative data path correct if it is not an absolute path
                if [[ "$data_dirpath" != "/"* ]]; then
                    rel_dirpath="../../$data_dirpath"
                else
                    rel_dirpath="$data_dirpath"
                fi
                # make hardcopy or symlink
                if [[ $hardcopy -gt 0 ]]; then
                    echo cp "${rel_dirpath}/$msa_name" \
                                 "auxiliary/$msa_name"
                    cp "${rel_dirpath}/$msa_name" \
                             "auxiliary/$msa_name"
                else
                    echo ln -fs "${rel_dirpath}/$msa_name" \
                                     "auxiliary/$msa_name"
                    ln -fs "${rel_dirpath}/$msa_name" \
                                 "auxiliary/$msa_name"
                fi
            fi
        done
    fi
    
    
    echo cd ../
    cd ../
    
done




echo "All done!"





