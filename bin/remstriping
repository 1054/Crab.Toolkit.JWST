#!/bin/bash
#
set -e

# Set necessary system variables
if [[ -z "$CRDS_PATH" ]]; then
    export CRDS_PATH=$HOME/jwst_crds_cache
fi
if [[ -z "$CRDS_SERVER_URL" ]]; then
    export CRDS_SERVER_URL=https://jwst-crds.stsci.edu
fi
if [[ -z "$CRDS_CONTEXT" ]]; then
    #export CRDS_CONTEXT="jwst_0932.pmap" # CRDS_SERVER_URL="https://jwst-crds.stsci.edu" python -c 'import crds; print(crds.get_default_context())' # 2022-07-24
    #export CRDS_CONTEXT="jwst_0937.pmap" # CRDS_SERVER_URL="https://jwst-crds.stsci.edu" python -c 'import crds; print(crds.get_default_context())' # 2022-07-27
    export CRDS_CONTEXT="jwst_0945.pmap" # CRDS_SERVER_URL="https://jwst-crds.stsci.edu" python -c 'import crds; print(crds.get_default_context())' # 2022-08-15
    echo "CRDS_CONTEXT = $CRDS_CONTEXT"
fi


# Get script_dir
script_dir=$(dirname $(perl -MCwd -e 'print Cwd::abs_path shift' "${BASH_SOURCE[0]}"))


# Read user input
iarg=1
argmode="none"
argstr=""
test=0
overwrite=0
input_files=()
while [[ $iarg -le $# ]]; do
    argstr="${!iarg}"
    if [[ "$argstr"x == "--test"x ]]; then
        argmode="test"
        iarg=$((iarg+1))
        continue
    elif [[ "$argstr"x == "--overwrite"x ]] || [[ "$argstr"x == "-overwrite"x ]]; then
        argmode="none"
        overwrite=1
        echo "overwrite=$overwrite"
        iarg=$((iarg+1))
        continue
    fi
    if [[ "$argmode"x == "test"x ]]; then
        test="${!iarg}"
        argmode="none"
    elif [[ "$argmode"x == "none"x ]]; then
        input_files+=("${!iarg}")
    fi
    iarg=$((iarg+1))
    continue
done


# Check user input
if [[ ${#input_files[@]} -eq 0 ]]; then
    echo "Please input a \"*.fits\" file."
    exit 255
fi


# Run
for (( i = 0; i < ${#input_files[@]}; i++ )); do
    
    input_file="${input_files[i]}"
    output_dir=$(dirname "$input_file")
    
    # make temp copy
    temp_file=$(echo "$input_file" | perl -p -e 's/\.fits$//g')"_remstriping_rate.fits" # CEERS' remstriping.py needs _rate.fits
    backup_file=$(echo "$input_file" | perl -p -e 's/\.fits$//g')"_orig.fits"
    
    echo cp "$input_file" "$temp_file"
    \cp "$input_file" "$temp_file"
    
    # CEERS team's "remstriping.py" script needs a galaxy seed image, i.e., indicating where galaxy emissions are.
    # I have a script "util_make_seed_image_for_rate_image.py" to detect galaxy emission and make such a seed image. 
    interm_file=$(echo "$temp_file" | perl -p -e 's/_rate.fits$//g')
    interm_files=($(find "$output_dir" -maxdepth 1 -mindepth 1 -name "${interm_file}_*_galaxy_seed_image.fits"))
    if [[ ${#interm_files[@]} -eq 0 ]] || [[ $overwrite -gt 0 ]]; then
        echo "python $script_dir/util_make_seed_image_for_rate_image.py \"$temp_file\""
        python $script_dir/util_make_seed_image_for_rate_image.py "$temp_file"
    fi
    
    # run CEERS team's "remstriping.py" scripts
    echo "python $script_dir/remstriping.py --runone \"$temp_file\" --output_dir \"$output_dir\" --threshold=0.0 --apply_flat --mask_sources"
    python $script_dir/remstriping.py --runone "$temp_file" --output_dir "$output_dir" --threshold=0.0 --apply_flat --mask_sources
    
    # do backup and copy results, the input_file will be overwritten!
    if [[ -f "$backup_file" ]]; then
        echo "Warning! Backup file exists: \"$backup_file\"! We will not do a new backup!"
    else
        echo cp "$input_file" "$backup_file"
        \cp "$input_file" "$backup_file"
    fi
    echo mv "$input_file" "$input_file.backup" # double backup
    \mv "$input_file" "$input_file.backup" # double backup
    echo cp "$temp_file" "$input_file"
    \cp "$temp_file" "$input_file"
    
done


